generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
  @@index([createdById], map: "Post_createdById_fkey")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id                 String      @id @default(cuid())
  name               String?
  email              String?     @unique
  emailVerified      DateTime?
  image              String?
  amazonWishlistUrl  String?
  departmentId       String?
  domain             String?
  firstName          String?
  lastName           String?
  profileCompleted   Boolean     @default(false)
  profileCompletedAt DateTime?
  workEmail          String?     @unique
  accounts           Account[]
  posts              Post[]
  sessions           Session[]
  department         Department? @relation(fields: [departmentId], references: [id])

  adminLevel AdminLevel @default(USER)
  adminScope String?

  @@index([departmentId], map: "User_departmentId_fkey")
}

model Department {
  id        String   @id @default(cuid())
  name      String
  domain    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@unique([name, domain])
  @@index([domain])
}

model Domain {
  id           String       @id @default(cuid())
  name         String       @unique
  enabled      Boolean      @default(false)
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  @@index([name])
  @@index([enabled])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AdminLevel {
  SITE
  DOMAIN
  DEPARTMENT
  USER
}
